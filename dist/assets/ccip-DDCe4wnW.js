import{B as e,g as a,s as t,d as s,i as r,l as n,a as o,c,b as d,e as l,H as u,f as i}from"./index-Do3rw6sO.js";import"./phaser-CPm-u6kw.js";class p extends e{constructor({callbackSelector:e,cause:t,data:s,extraData:r,sender:n,urls:o}){var c;super(t.shortMessage||"An error occurred while fetching for an offchain result.",{cause:t,metaMessages:[...t.metaMessages||[],(null==(c=t.metaMessages)?void 0:c.length)?"":[],"Offchain Gateway Call:",o&&["  Gateway URL(s):",...o.map((e=>`    ${a(e)}`))],`  Sender: ${n}`,`  Data: ${s}`,`  Callback selector: ${e}`,`  Extra data: ${r}`].flat(),name:"OffchainLookupError"})}}class f extends e{constructor({result:e,url:s}){super("Offchain gateway response is malformed. Response data must be a hex value.",{metaMessages:[`Gateway URL: ${a(s)}`,`Response: ${t(e)}`],name:"OffchainLookupResponseMalformedError"})}}class h extends e{constructor({sender:e,to:a}){super("Reverted sender address does not match target contract address (`to`).",{metaMessages:[`Contract address: ${a}`,`OffchainLookup sender address: ${e}`],name:"OffchainLookupSenderMismatchError"})}}const m="0x556f1830",y={name:"OffchainLookup",type:"error",inputs:[{name:"sender",type:"address"},{name:"urls",type:"string[]"},{name:"callData",type:"bytes"},{name:"callbackFunction",type:"bytes4"},{name:"extraData",type:"bytes"}]};async function w(e,{blockNumber:a,blockTag:t,data:u,to:i}){const{args:f}=s({data:u,abi:[y]}),[m,w,g,k,x]=f,{ccipRead:O}=e,v=O&&"function"==typeof(null==O?void 0:O.request)?O.request:b;try{if(!r(i,m))throw new h({sender:m,to:i});const s=w.includes(n)?await o({data:g,ccipRequest:v}):await v({data:g,sender:m,urls:w}),{data:u}=await c(e,{blockNumber:a,blockTag:t,data:d([k,l([{type:"bytes"},{type:"bytes"}],[s,x])]),to:i});return u}catch(T){throw new p({callbackSelector:k,cause:T,data:u,extraData:x,sender:m,urls:w})}}async function b({data:e,sender:a,urls:s}){var r;let n=new Error("An unknown error occurred.");for(let c=0;c<s.length;c++){const d=s[c],l=d.includes("{data}")?"GET":"POST",p="POST"===l?{data:e,sender:a}:void 0,h="POST"===l?{"Content-Type":"application/json"}:{};try{const s=await fetch(d.replace("{sender}",a.toLowerCase()).replace("{data}",e),{body:JSON.stringify(p),headers:h,method:l});let o;if(o=(null==(r=s.headers.get("Content-Type"))?void 0:r.startsWith("application/json"))?(await s.json()).data:await s.text(),!s.ok){n=new u({body:p,details:(null==o?void 0:o.error)?t(o.error):s.statusText,headers:s.headers,status:s.status,url:d});continue}if(!i(o)){n=new f({result:o,url:d});continue}return o}catch(o){n=new u({body:p,details:o.message,url:d})}}throw n}export{b as ccipRequest,w as offchainLookup,y as offchainLookupAbiItem,m as offchainLookupSignature};
